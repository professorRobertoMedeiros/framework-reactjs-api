import swaggerJsdoc from 'swagger-jsdoc';
import { Options } from 'swagger-jsdoc';

/**
 * Opções de configuração do Swagger
 */
export interface SwaggerConfigOptions {
  /**
   * Título da API (padrão: 'API Documentation')
   */
  title?: string;
  
  /**
   * Descrição da API (padrão: 'API documentation generated by Framework ReactJS API')
   */
  description?: string;
  
  /**
   * Versão da API (padrão: '1.0.0')
   */
  version?: string;
  
  /**
   * URL base do servidor (padrão: 'http://localhost:3000')
   */
  serverUrl?: string;
  
  /**
   * Descrição do servidor (padrão: 'Development server')
   */
  serverDescription?: string;
  
  /**
   * Servidores adicionais
   */
  servers?: Array<{
    url: string;
    description: string;
  }>;
  
  /**
   * Tags para organizar endpoints
   */
  tags?: Array<{
    name: string;
    description: string;
  }>;
  
  /**
   * Paths dos arquivos para documentar (padrão: ['./src/**\/*.ts'])
   */
  apis?: string[];
  
  /**
   * Informações de contato
   */
  contact?: {
    name: string;
    email?: string;
    url?: string;
  };
  
  /**
   * Informações de licença
   */
  license?: {
    name: string;
    url?: string;
  };
  
  /**
   * Configuração de autenticação JWT
   */
  enableJWT?: boolean;
  
  /**
   * Security schemes adicionais
   */
  securitySchemes?: Record<string, any>;
}

/**
 * Configuração padrão do Swagger
 */
const defaultSwaggerOptions: SwaggerConfigOptions = {
  title: 'API Documentation',
  description: 'API documentation generated by Framework ReactJS API',
  version: '1.0.0',
  serverUrl: process.env.API_URL || 'http://localhost:3000',
  serverDescription: 'Development server',
  apis: ['./src/**/*.ts'],
  enableJWT: true,
  tags: [
    {
      name: 'Authentication',
      description: 'Authentication endpoints'
    }
  ]
};

/**
 * Gera a especificação do Swagger
 * 
 * @param options Opções de configuração
 * @returns Especificação do Swagger
 */
export function generateSwaggerSpec(options: SwaggerConfigOptions = {}): object {
  const config = { ...defaultSwaggerOptions, ...options };
  
  // Construir lista de servidores
  const servers = [
    {
      url: config.serverUrl!,
      description: config.serverDescription!
    }
  ];
  
  if (config.servers && config.servers.length > 0) {
    servers.push(...config.servers);
  }
  
  // Construir security schemes
  const securitySchemes: Record<string, any> = {};
  
  if (config.enableJWT) {
    securitySchemes.bearerAuth = {
      type: 'http',
      scheme: 'bearer',
      bearerFormat: 'JWT',
      description: 'Enter JWT token obtained from /api/auth/login'
    };
  }
  
  if (config.securitySchemes) {
    Object.assign(securitySchemes, config.securitySchemes);
  }
  
  // Configuração do swagger-jsdoc
  const swaggerOptions: Options = {
    definition: {
      openapi: '3.0.0',
      info: {
        title: config.title!,
        description: config.description!,
        version: config.version!,
        contact: config.contact,
        license: config.license
      },
      servers,
      tags: config.tags,
      components: {
        securitySchemes,
        schemas: {
          // Schemas comuns
          Error: {
            type: 'object',
            properties: {
              status: {
                type: 'number',
                description: 'HTTP status code'
              },
              message: {
                type: 'string',
                description: 'Error message'
              }
            }
          },
          SuccessResponse: {
            type: 'object',
            properties: {
              status: {
                type: 'number',
                description: 'HTTP status code'
              },
              data: {
                type: 'object',
                description: 'Response data'
              },
              message: {
                type: 'string',
                description: 'Success message'
              }
            }
          }
        }
      },
      security: config.enableJWT ? [{ bearerAuth: [] }] : []
    },
    apis: config.apis!
  };
  
  return swaggerJsdoc(swaggerOptions);
}

/**
 * Configurações padrão para swagger-ui-express
 */
export const swaggerUIOptions = {
  customCss: '.swagger-ui .topbar { display: none }',
  customSiteTitle: 'API Documentation',
  swaggerOptions: {
    persistAuthorization: true,
    displayRequestDuration: true,
    filter: true,
    tryItOutEnabled: true
  }
};

/**
 * Gera documentação Swagger para rotas de autenticação padrão
 */
export const authSwaggerDocs = `
/**
 * @swagger
 * /api/auth/login:
 *   post:
 *     tags:
 *       - Authentication
 *     summary: Login to the system
 *     description: Authenticate user and return JWT token
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - email
 *               - password
 *             properties:
 *               email:
 *                 type: string
 *                 format: email
 *                 example: user@example.com
 *               password:
 *                 type: string
 *                 format: password
 *                 example: password123
 *     responses:
 *       200:
 *         description: Login successful
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 token:
 *                   type: string
 *                   description: JWT token
 *                 user:
 *                   type: object
 *                   properties:
 *                     id:
 *                       type: number
 *                     email:
 *                       type: string
 *                     first_name:
 *                       type: string
 *                     last_name:
 *                       type: string
 *       401:
 *         description: Invalid credentials
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 * 
 * /api/auth/register:
 *   post:
 *     tags:
 *       - Authentication
 *     summary: Register a new user
 *     description: Create a new user account
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - email
 *               - password
 *               - first_name
 *               - last_name
 *             properties:
 *               email:
 *                 type: string
 *                 format: email
 *                 example: newuser@example.com
 *               password:
 *                 type: string
 *                 format: password
 *                 example: password123
 *               first_name:
 *                 type: string
 *                 example: John
 *               last_name:
 *                 type: string
 *                 example: Doe
 *     responses:
 *       201:
 *         description: User created successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 token:
 *                   type: string
 *                   description: JWT token
 *                 user:
 *                   type: object
 *                   properties:
 *                     id:
 *                       type: number
 *                     email:
 *                       type: string
 *                     first_name:
 *                       type: string
 *                     last_name:
 *                       type: string
 *       400:
 *         description: Invalid input or user already exists
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 * 
 * /api/auth/me:
 *   get:
 *     tags:
 *       - Authentication
 *     summary: Get current user
 *     description: Get information about the authenticated user
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: User information
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 id:
 *                   type: number
 *                 email:
 *                   type: string
 *                 first_name:
 *                   type: string
 *                 last_name:
 *                   type: string
 *                 active:
 *                   type: boolean
 *       401:
 *         description: Unauthorized
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 */
`;
