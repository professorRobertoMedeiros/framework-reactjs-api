#!/bin/bash

# Script de demonstração visual do sistema de logging com UUID

echo ""
echo "╔════════════════════════════════════════════════════════════════════════════╗"
echo "║                                                                            ║"
echo "║          🎯 SISTEMA DE LOGGING COM UUID ÚNICO POR REQUISIÇÃO             ║"
echo "║                                                                            ║"
echo "║  Cada requisição HTTP possui um UUID único que é propagado                ║"
echo "║  automaticamente para TODOS os logs, incluindo queries SQL!               ║"
echo "║                                                                            ║"
echo "╚════════════════════════════════════════════════════════════════════════════╝"
echo ""
echo ""
echo "📋 ARQUITETURA DO SISTEMA"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
echo "  ┌─────────────────┐"
echo "  │  HTTP Request   │  ← Cliente faz requisição"
echo "  └────────┬────────┘"
echo "           │"
echo "           ▼"
echo "  ┌─────────────────────┐"
echo "  │ TracingMiddleware   │  ← Gera UUID: 550e8400-e29b-41d4..."
echo "  │ (addRequestId)      │     Armazena em AsyncLocalStorage"
echo "  └────────┬────────────┘"
echo "           │"
echo "           ▼"
echo "  ┌─────────────────────┐"
echo "  │ HTTPLoggerMiddleware│  ← Log: [RequestID: 550e8400...]"
echo "  └────────┬────────────┘"
echo "           │"
echo "           ├──────────────────────────┐"
echo "           │                          │"
echo "           ▼                          ▼"
echo "  ┌─────────────────┐      ┌──────────────────┐"
echo "  │ Route Handler   │      │ Business Logic   │"
echo "  │ (products.ts)   │      │ (ProductBusiness)│"
echo "  └────────┬────────┘      └────────┬─────────┘"
echo "           │                        │"
echo "           │  Logs com UUID         │  Logs com UUID"
echo "           │                        │"
echo "           └────────┬───────────────┘"
echo "                    │"
echo "                    ▼"
echo "           ┌──────────────────┐"
echo "           │ Repository       │  ← Logs com UUID"
echo "           │ (ProductRepo)    │"
echo "           └────────┬─────────┘"
echo "                    │"
echo "                    ▼"
echo "           ┌──────────────────┐"
echo "           │ CustomORM        │  ← Logs SQL com UUID"
echo "           │ (queries)        │"
echo "           └────────┬─────────┘"
echo "                    │"
echo "                    ▼"
echo "           ┌────────────┐"
echo "           │ PostgreSQL │  ← Query executada"
echo "           └────────────┘"
echo ""
echo ""
echo "✅ RESULTADO: Todos os logs possuem o MESMO UUID!"
echo ""
echo ""
echo "📊 EXEMPLO DE LOGS GERADOS"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
echo "  🟢 [INFO] [HTTP] [RequestID: 550e8400-e29b-41d4] Received POST /api/products"
echo "     └─ Requisição recebida"
echo ""
echo "  🟢 [INFO] [APP] [RequestID: 550e8400-e29b-41d4] Creating new product"
echo "     └─ Route handler"
echo ""
echo "  🟢 [INFO] [APP] [RequestID: 550e8400-e29b-41d4] Business: Starting creation"
echo "     └─ Business logic"
echo ""
echo "  🔵 [DEBUG] [APP] [RequestID: 550e8400-e29b-41d4] Repository: Inserting product"
echo "     └─ Repository"
echo ""
echo "  🔵 [DEBUG] [SQL] [RequestID: 550e8400-e29b-41d4] SQL INSERT executed"
echo "     SQL: { query: 'INSERT INTO products ...', params: [...], duration: 5ms }"
echo "     └─ Query SQL executada"
echo ""
echo "  🟢 [INFO] [APP] [RequestID: 550e8400-e29b-41d4] Product created successfully"
echo "     └─ Sucesso na criação"
echo ""
echo "  🟢 [INFO] [HTTP] [RequestID: 550e8400-e29b-41d4] POST /api/products 201 - 45ms"
echo "     └─ Resposta enviada"
echo ""
echo ""
echo "🔍 RASTREAMENTO"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
echo "  # Ver TODOS os logs de uma requisição específica:"
echo "  grep '550e8400-e29b-41d4' logs/*.log"
echo ""
echo "  # Filtrar em JSON:"
echo "  cat logs/http-*.log | jq 'select(.requestId == \"550e8400-e29b-41d4\")'"
echo ""
echo "  # Ver apenas queries SQL de uma requisição:"
echo "  cat logs/sql-*.log | jq 'select(.requestId == \"550e8400-e29b-41d4\")'"
echo ""
echo "  # Requisições lentas (> 1 segundo):"
echo "  cat logs/http-*.log | jq 'select(.data.duration > 1000)'"
echo ""
echo "  # Queries SQL lentas (> 100ms):"
echo "  cat logs/sql-*.log | jq 'select(.sql.duration > 100)'"
echo ""
echo ""
echo "⚙️  CONFIGURAÇÃO"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
echo "  1. .env:"
echo "     LOG_ENABLED=true"
echo "     LOG_LEVEL=debug"
echo "     LOG_SQL=true"
echo "     LOG_HTTP=true"
echo ""
echo "  2. Express setup (apenas 2 linhas!):"
echo "     app.use(TracingMiddleware.addRequestId());"
echo "     app.use(HTTPLoggerMiddleware.log());"
echo ""
echo "  3. Pronto! 🎉"
echo ""
echo ""
echo "🎯 BENEFÍCIOS"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
echo "  ✅ Rastreamento completo de requisições"
echo "  ✅ Logs SQL incluem UUID automaticamente"
echo "  ✅ Debug muito mais rápido em produção"
echo "  ✅ Zero configuração manual (AsyncLocalStorage)"
echo "  ✅ Compatível com ELK Stack, Grafana Loki, etc"
echo "  ✅ Não quebra código existente"
echo ""
echo ""
echo "📁 ARQUIVOS"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
echo "  Modificados (3):"
echo "    • src/infra/logger/Logger.ts"
echo "    • src/infra/db/CustomORM.ts"
echo "    • src/infra/logger/HTTPLoggerMiddleware.ts"
echo ""
echo "  Documentação (3):"
echo "    • docs/LOGGING-WITH-UUID.md (completo)"
echo "    • docs/LOGGING-UUID-SUMMARY.md (resumo)"
echo "    • IMPLEMENTATION-SUMMARY.md (atualizado)"
echo ""
echo "  Exemplo completo (11 arquivos):"
echo "    • examples/logging-example/"
echo "      - API REST funcional"
echo "      - Todas as camadas (Route → Business → Repository → ORM)"
echo "      - Script de teste"
echo "      - Documentação"
echo ""
echo ""
echo "🧪 TESTAR O EXEMPLO"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
echo "  cd examples/logging-example"
echo "  cp .env.example .env"
echo "  createdb logging_example"
echo "  psql -d logging_example -f migrations/001_create_products_table.sql"
echo "  npm install"
echo "  npm run dev"
echo ""
echo "  # Em outro terminal:"
echo "  chmod +x test-logging.sh"
echo "  ./test-logging.sh"
echo ""
echo ""
echo "📚 DOCUMENTAÇÃO"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
echo "  • Documentação completa:"
echo "    docs/LOGGING-WITH-UUID.md"
echo ""
echo "  • Resumo executivo:"
echo "    docs/LOGGING-UUID-SUMMARY.md"
echo ""
echo "  • Exemplo:"
echo "    examples/logging-example/README.md"
echo ""
echo ""
echo "╔════════════════════════════════════════════════════════════════════════════╗"
echo "║                                                                            ║"
echo "║                         ✅ IMPLEMENTAÇÃO COMPLETA!                        ║"
echo "║                                                                            ║"
echo "║  Sistema de logging com UUID único por requisição funcionando             ║"
echo "║  em todas as camadas, incluindo queries SQL no banco de dados.            ║"
echo "║                                                                            ║"
echo "║                  Pronto para uso em produção! 🚀                          ║"
echo "║                                                                            ║"
echo "╚════════════════════════════════════════════════════════════════════════════╝"
echo ""
